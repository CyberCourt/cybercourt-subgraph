// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MainContract__basicInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: i32;
  value11: Address;
  value12: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: i32,
    value11: Address,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromSignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromSignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromI32(this.value10));
    map.set("value11", ethereum.Value.fromAddress(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }
}

export class MainContract__conPersonProposalMapResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: Address;

  constructor(value0: i32, value1: i32, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class MainContract__contractPersonMapResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MainContract__judgerProposalMapResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: Address;

  constructor(value0: i32, value1: i32, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class MainContract__getContractSignInfoResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }
}

export class MainContract__getProposalSignInfoResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }
}

export class MainContract__exitStakeBalanceResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class MainContract extends ethereum.SmartContract {
  static bind(address: Address): MainContract {
    return new MainContract("MainContract", address);
  }

  basicInfo(): MainContract__basicInfoResult {
    let result = super.call(
      "basicInfo",
      "basicInfo():(uint256,uint256,uint256,uint256,uint256,address,uint256,int256,int256,uint256,int8,address,uint256)",
      []
    );

    return new MainContract__basicInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toI32(),
      result[11].toAddress(),
      result[12].toBigInt()
    );
  }

  try_basicInfo(): ethereum.CallResult<MainContract__basicInfoResult> {
    let result = super.tryCall(
      "basicInfo",
      "basicInfo():(uint256,uint256,uint256,uint256,uint256,address,uint256,int256,int256,uint256,int8,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__basicInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toI32(),
        value[11].toAddress(),
        value[12].toBigInt()
      )
    );
  }

  conPersonProposalMap(
    param0: BigInt
  ): MainContract__conPersonProposalMapResult {
    let result = super.call(
      "conPersonProposalMap",
      "conPersonProposalMap(uint256):(uint8,uint8,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MainContract__conPersonProposalMapResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_conPersonProposalMap(
    param0: BigInt
  ): ethereum.CallResult<MainContract__conPersonProposalMapResult> {
    let result = super.tryCall(
      "conPersonProposalMap",
      "conPersonProposalMap(uint256):(uint8,uint8,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__conPersonProposalMapResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  conPersonProposalMapNum(): BigInt {
    let result = super.call(
      "conPersonProposalMapNum",
      "conPersonProposalMapNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_conPersonProposalMapNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "conPersonProposalMapNum",
      "conPersonProposalMapNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractMap(param0: i32): BigInt {
    let result = super.call("contractMap", "contractMap(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBigInt();
  }

  try_contractMap(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("contractMap", "contractMap(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractMapNum(): i32 {
    let result = super.call("contractMapNum", "contractMapNum():(uint8)", []);

    return result[0].toI32();
  }

  try_contractMapNum(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractMapNum",
      "contractMapNum():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  contractPersonAddrMap(param0: i32): Address {
    let result = super.call(
      "contractPersonAddrMap",
      "contractPersonAddrMap(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toAddress();
  }

  try_contractPersonAddrMap(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contractPersonAddrMap",
      "contractPersonAddrMap(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractPersonAddrMapNum(): i32 {
    let result = super.call(
      "contractPersonAddrMapNum",
      "contractPersonAddrMapNum():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_contractPersonAddrMapNum(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractPersonAddrMapNum",
      "contractPersonAddrMapNum():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  contractPersonMap(param0: Address): MainContract__contractPersonMapResult {
    let result = super.call(
      "contractPersonMap",
      "contractPersonMap(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MainContract__contractPersonMapResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_contractPersonMap(
    param0: Address
  ): ethereum.CallResult<MainContract__contractPersonMapResult> {
    let result = super.tryCall(
      "contractPersonMap",
      "contractPersonMap(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__contractPersonMapResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  judgerBalance(): BigInt {
    let result = super.call("judgerBalance", "judgerBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_judgerBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "judgerBalance",
      "judgerBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  judgerExistedMap(param0: Address): boolean {
    let result = super.call(
      "judgerExistedMap",
      "judgerExistedMap(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_judgerExistedMap(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "judgerExistedMap",
      "judgerExistedMap(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  judgerMap(param0: i32): Address {
    let result = super.call("judgerMap", "judgerMap(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toAddress();
  }

  try_judgerMap(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall("judgerMap", "judgerMap(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  judgerMapNum(): i32 {
    let result = super.call("judgerMapNum", "judgerMapNum():(uint8)", []);

    return result[0].toI32();
  }

  try_judgerMapNum(): ethereum.CallResult<i32> {
    let result = super.tryCall("judgerMapNum", "judgerMapNum():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  judgerOrg(): Address {
    let result = super.call("judgerOrg", "judgerOrg():(address)", []);

    return result[0].toAddress();
  }

  try_judgerOrg(): ethereum.CallResult<Address> {
    let result = super.tryCall("judgerOrg", "judgerOrg():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  judgerProposalMap(param0: BigInt): MainContract__judgerProposalMapResult {
    let result = super.call(
      "judgerProposalMap",
      "judgerProposalMap(uint256):(uint8,uint8,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MainContract__judgerProposalMapResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_judgerProposalMap(
    param0: BigInt
  ): ethereum.CallResult<MainContract__judgerProposalMapResult> {
    let result = super.tryCall(
      "judgerProposalMap",
      "judgerProposalMap(uint256):(uint8,uint8,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__judgerProposalMapResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  judgerProposalMapNum(): BigInt {
    let result = super.call(
      "judgerProposalMapNum",
      "judgerProposalMapNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_judgerProposalMapNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "judgerProposalMapNum",
      "judgerProposalMapNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  judgerRateMantissa(): BigInt {
    let result = super.call(
      "judgerRateMantissa",
      "judgerRateMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_judgerRateMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "judgerRateMantissa",
      "judgerRateMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractSignInfo(
    contractOrder: i32,
    user: Address
  ): MainContract__getContractSignInfoResult {
    let result = super.call(
      "getContractSignInfo",
      "getContractSignInfo(uint8,address):(uint256,int8)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(contractOrder)),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new MainContract__getContractSignInfoResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_getContractSignInfo(
    contractOrder: i32,
    user: Address
  ): ethereum.CallResult<MainContract__getContractSignInfoResult> {
    let result = super.tryCall(
      "getContractSignInfo",
      "getContractSignInfo(uint8,address):(uint256,int8)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(contractOrder)),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__getContractSignInfoResult(
        value[0].toBigInt(),
        value[1].toI32()
      )
    );
  }

  getProposalSignInfo(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    user: Address
  ): MainContract__getProposalSignInfoResult {
    let result = super.call(
      "getProposalSignInfo",
      "getProposalSignInfo(bool,uint256,address):(uint256,int8)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new MainContract__getProposalSignInfoResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_getProposalSignInfo(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    user: Address
  ): ethereum.CallResult<MainContract__getProposalSignInfoResult> {
    let result = super.tryCall(
      "getProposalSignInfo",
      "getProposalSignInfo(bool,uint256,address):(uint256,int8)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__getProposalSignInfoResult(
        value[0].toBigInt(),
        value[1].toI32()
      )
    );
  }

  getProposalAssignAddr(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    order: i32
  ): Address {
    let result = super.call(
      "getProposalAssignAddr",
      "getProposalAssignAddr(bool,uint256,uint8):(address)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(order))
      ]
    );

    return result[0].toAddress();
  }

  try_getProposalAssignAddr(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    order: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProposalAssignAddr",
      "getProposalAssignAddr(bool,uint256,uint8):(address)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(order))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProposalAssignBalance(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    user: Address
  ): BigInt {
    let result = super.call(
      "getProposalAssignBalance",
      "getProposalAssignBalance(bool,uint256,address):(uint256)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getProposalAssignBalance(
    isJudgerProposal: boolean,
    proposalOrder: BigInt,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalAssignBalance",
      "getProposalAssignBalance(bool,uint256,address):(uint256)",
      [
        ethereum.Value.fromBoolean(isJudgerProposal),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exitStakeBalance(
    sponsor: Address,
    stakeBalance: BigInt
  ): MainContract__exitStakeBalanceResult {
    let result = super.call(
      "exitStakeBalance",
      "exitStakeBalance(address,uint256):(bool,bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(stakeBalance)
      ]
    );

    return new MainContract__exitStakeBalanceResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_exitStakeBalance(
    sponsor: Address,
    stakeBalance: BigInt
  ): ethereum.CallResult<MainContract__exitStakeBalanceResult> {
    let result = super.tryCall(
      "exitStakeBalance",
      "exitStakeBalance(address,uint256):(bool,bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(stakeBalance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MainContract__exitStakeBalanceResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  signContract(sponsor: Address, contractOrder: i32, signStatus: i32): boolean {
    let result = super.call(
      "signContract",
      "signContract(address,uint8,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(contractOrder)),
        ethereum.Value.fromI32(signStatus)
      ]
    );

    return result[0].toBoolean();
  }

  try_signContract(
    sponsor: Address,
    contractOrder: i32,
    signStatus: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "signContract",
      "signContract(address,uint8,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(contractOrder)),
        ethereum.Value.fromI32(signStatus)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  signProposal(
    sponsor: Address,
    proposalOrder: BigInt,
    signStatus: i32
  ): boolean {
    let result = super.call(
      "signProposal",
      "signProposal(address,uint256,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromI32(signStatus)
      ]
    );

    return result[0].toBoolean();
  }

  try_signProposal(
    sponsor: Address,
    proposalOrder: BigInt,
    signStatus: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "signProposal",
      "signProposal(address,uint256,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromI32(signStatus)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  signJudgerProposal(
    sponsor: Address,
    proposalOrder: BigInt,
    signStatus: i32
  ): boolean {
    let result = super.call(
      "signJudgerProposal",
      "signJudgerProposal(address,uint256,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromI32(signStatus)
      ]
    );

    return result[0].toBoolean();
  }

  try_signJudgerProposal(
    sponsor: Address,
    proposalOrder: BigInt,
    signStatus: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "signJudgerProposal",
      "signJudgerProposal(address,uint256,int8):(bool)",
      [
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromUnsignedBigInt(proposalOrder),
        ethereum.Value.fromI32(signStatus)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreateMainContractCall extends ethereum.Call {
  get inputs(): CreateMainContractCall__Inputs {
    return new CreateMainContractCall__Inputs(this);
  }

  get outputs(): CreateMainContractCall__Outputs {
    return new CreateMainContractCall__Outputs(this);
  }
}

export class CreateMainContractCall__Inputs {
  _call: CreateMainContractCall;

  constructor(call: CreateMainContractCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get persons(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get stakeBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get controlledToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get judgerOrg_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CreateMainContractCall__Outputs {
  _call: CreateMainContractCall;

  constructor(call: CreateMainContractCall) {
    this._call = call;
  }
}

export class ClearContractPersonBalanceCall extends ethereum.Call {
  get inputs(): ClearContractPersonBalanceCall__Inputs {
    return new ClearContractPersonBalanceCall__Inputs(this);
  }

  get outputs(): ClearContractPersonBalanceCall__Outputs {
    return new ClearContractPersonBalanceCall__Outputs(this);
  }
}

export class ClearContractPersonBalanceCall__Inputs {
  _call: ClearContractPersonBalanceCall;

  constructor(call: ClearContractPersonBalanceCall) {
    this._call = call;
  }

  get person(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearContractPersonBalanceCall__Outputs {
  _call: ClearContractPersonBalanceCall;

  constructor(call: ClearContractPersonBalanceCall) {
    this._call = call;
  }
}

export class AddContractCall extends ethereum.Call {
  get inputs(): AddContractCall__Inputs {
    return new AddContractCall__Inputs(this);
  }

  get outputs(): AddContractCall__Outputs {
    return new AddContractCall__Outputs(this);
  }
}

export class AddContractCall__Inputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddContractCall__Outputs {
  _call: AddContractCall;

  constructor(call: AddContractCall) {
    this._call = call;
  }
}

export class AddStakeBalanceCall extends ethereum.Call {
  get inputs(): AddStakeBalanceCall__Inputs {
    return new AddStakeBalanceCall__Inputs(this);
  }

  get outputs(): AddStakeBalanceCall__Outputs {
    return new AddStakeBalanceCall__Outputs(this);
  }
}

export class AddStakeBalanceCall__Inputs {
  _call: AddStakeBalanceCall;

  constructor(call: AddStakeBalanceCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get finalBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeBalanceCall__Outputs {
  _call: AddStakeBalanceCall;

  constructor(call: AddStakeBalanceCall) {
    this._call = call;
  }
}

export class ApplyExitCall extends ethereum.Call {
  get inputs(): ApplyExitCall__Inputs {
    return new ApplyExitCall__Inputs(this);
  }

  get outputs(): ApplyExitCall__Outputs {
    return new ApplyExitCall__Outputs(this);
  }
}

export class ApplyExitCall__Inputs {
  _call: ApplyExitCall;

  constructor(call: ApplyExitCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApplyExitCall__Outputs {
  _call: ApplyExitCall;

  constructor(call: ApplyExitCall) {
    this._call = call;
  }
}

export class ExitStakeBalanceCall extends ethereum.Call {
  get inputs(): ExitStakeBalanceCall__Inputs {
    return new ExitStakeBalanceCall__Inputs(this);
  }

  get outputs(): ExitStakeBalanceCall__Outputs {
    return new ExitStakeBalanceCall__Outputs(this);
  }
}

export class ExitStakeBalanceCall__Inputs {
  _call: ExitStakeBalanceCall;

  constructor(call: ExitStakeBalanceCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stakeBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExitStakeBalanceCall__Outputs {
  _call: ExitStakeBalanceCall;

  constructor(call: ExitStakeBalanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class SignContractCall extends ethereum.Call {
  get inputs(): SignContractCall__Inputs {
    return new SignContractCall__Inputs(this);
  }

  get outputs(): SignContractCall__Outputs {
    return new SignContractCall__Outputs(this);
  }
}

export class SignContractCall__Inputs {
  _call: SignContractCall;

  constructor(call: SignContractCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractOrder(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get signStatus(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SignContractCall__Outputs {
  _call: SignContractCall;

  constructor(call: SignContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LaunchProposalCall extends ethereum.Call {
  get inputs(): LaunchProposalCall__Inputs {
    return new LaunchProposalCall__Inputs(this);
  }

  get outputs(): LaunchProposalCall__Outputs {
    return new LaunchProposalCall__Outputs(this);
  }
}

export class LaunchProposalCall__Inputs {
  _call: LaunchProposalCall;

  constructor(call: LaunchProposalCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get persons(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get balance(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class LaunchProposalCall__Outputs {
  _call: LaunchProposalCall;

  constructor(call: LaunchProposalCall) {
    this._call = call;
  }
}

export class SignProposalCall extends ethereum.Call {
  get inputs(): SignProposalCall__Inputs {
    return new SignProposalCall__Inputs(this);
  }

  get outputs(): SignProposalCall__Outputs {
    return new SignProposalCall__Outputs(this);
  }
}

export class SignProposalCall__Inputs {
  _call: SignProposalCall;

  constructor(call: SignProposalCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalOrder(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signStatus(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SignProposalCall__Outputs {
  _call: SignProposalCall;

  constructor(call: SignProposalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LaunchJudgerProposalCall extends ethereum.Call {
  get inputs(): LaunchJudgerProposalCall__Inputs {
    return new LaunchJudgerProposalCall__Inputs(this);
  }

  get outputs(): LaunchJudgerProposalCall__Outputs {
    return new LaunchJudgerProposalCall__Outputs(this);
  }
}

export class LaunchJudgerProposalCall__Inputs {
  _call: LaunchJudgerProposalCall;

  constructor(call: LaunchJudgerProposalCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get persons(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get balance(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class LaunchJudgerProposalCall__Outputs {
  _call: LaunchJudgerProposalCall;

  constructor(call: LaunchJudgerProposalCall) {
    this._call = call;
  }
}

export class SignJudgerProposalCall extends ethereum.Call {
  get inputs(): SignJudgerProposalCall__Inputs {
    return new SignJudgerProposalCall__Inputs(this);
  }

  get outputs(): SignJudgerProposalCall__Outputs {
    return new SignJudgerProposalCall__Outputs(this);
  }
}

export class SignJudgerProposalCall__Inputs {
  _call: SignJudgerProposalCall;

  constructor(call: SignJudgerProposalCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalOrder(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signStatus(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SignJudgerProposalCall__Outputs {
  _call: SignJudgerProposalCall;

  constructor(call: SignJudgerProposalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApplyJudgeCall extends ethereum.Call {
  get inputs(): ApplyJudgeCall__Inputs {
    return new ApplyJudgeCall__Inputs(this);
  }

  get outputs(): ApplyJudgeCall__Outputs {
    return new ApplyJudgeCall__Outputs(this);
  }
}

export class ApplyJudgeCall__Inputs {
  _call: ApplyJudgeCall;

  constructor(call: ApplyJudgeCall) {
    this._call = call;
  }

  get sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get judgerNum_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ApplyJudgeCall__Outputs {
  _call: ApplyJudgeCall;

  constructor(call: ApplyJudgeCall) {
    this._call = call;
  }
}

export class SetJudgerCall extends ethereum.Call {
  get inputs(): SetJudgerCall__Inputs {
    return new SetJudgerCall__Inputs(this);
  }

  get outputs(): SetJudgerCall__Outputs {
    return new SetJudgerCall__Outputs(this);
  }
}

export class SetJudgerCall__Inputs {
  _call: SetJudgerCall;

  constructor(call: SetJudgerCall) {
    this._call = call;
  }

  get judgerOrder(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get order(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get judger(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetJudgerCall__Outputs {
  _call: SetJudgerCall;

  constructor(call: SetJudgerCall) {
    this._call = call;
  }
}
