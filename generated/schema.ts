// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MainContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MainContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MainContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MainContract", id.toString(), this);
  }

  static load(id: string): MainContract | null {
    return store.get("MainContract", id) as MainContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mainContractAddr(): Bytes {
    let value = this.get("mainContractAddr");
    return value.toBytes();
  }

  set mainContractAddr(value: Bytes) {
    this.set("mainContractAddr", Value.fromBytes(value));
  }

  get judgerOrgAddr(): Bytes {
    let value = this.get("judgerOrgAddr");
    return value.toBytes();
  }

  set judgerOrgAddr(value: Bytes) {
    this.set("judgerOrgAddr", Value.fromBytes(value));
  }

  get mainContractOrder(): BigInt {
    let value = this.get("mainContractOrder");
    return value.toBigInt();
  }

  set mainContractOrder(value: BigInt) {
    this.set("mainContractOrder", Value.fromBigInt(value));
  }

  get startBlockTime(): BigInt {
    let value = this.get("startBlockTime");
    return value.toBigInt();
  }

  set startBlockTime(value: BigInt) {
    this.set("startBlockTime", Value.fromBigInt(value));
  }

  get endBlockTime(): BigInt {
    let value = this.get("endBlockTime");
    return value.toBigInt();
  }

  set endBlockTime(value: BigInt) {
    this.set("endBlockTime", Value.fromBigInt(value));
  }

  get applyExitBlockTime(): BigInt {
    let value = this.get("applyExitBlockTime");
    return value.toBigInt();
  }

  set applyExitBlockTime(value: BigInt) {
    this.set("applyExitBlockTime", Value.fromBigInt(value));
  }

  get applyJudgeBlockTime(): BigInt {
    let value = this.get("applyJudgeBlockTime");
    return value.toBigInt();
  }

  set applyJudgeBlockTime(value: BigInt) {
    this.set("applyJudgeBlockTime", Value.fromBigInt(value));
  }

  get exitWaitPeriodTime(): BigInt {
    let value = this.get("exitWaitPeriodTime");
    return value.toBigInt();
  }

  set exitWaitPeriodTime(value: BigInt) {
    this.set("exitWaitPeriodTime", Value.fromBigInt(value));
  }

  get controlledToken(): Bytes {
    let value = this.get("controlledToken");
    return value.toBytes();
  }

  set controlledToken(value: Bytes) {
    this.set("controlledToken", Value.fromBytes(value));
  }

  get limitJudgePeriodTime(): BigInt {
    let value = this.get("limitJudgePeriodTime");
    return value.toBigInt();
  }

  set limitJudgePeriodTime(value: BigInt) {
    this.set("limitJudgePeriodTime", Value.fromBigInt(value));
  }

  get succJudgeProposalOrder(): BigInt {
    let value = this.get("succJudgeProposalOrder");
    return value.toBigInt();
  }

  set succJudgeProposalOrder(value: BigInt) {
    this.set("succJudgeProposalOrder", Value.fromBigInt(value));
  }

  get succConPersonProposalOrder(): BigInt {
    let value = this.get("succConPersonProposalOrder");
    return value.toBigInt();
  }

  set succConPersonProposalOrder(value: BigInt) {
    this.set("succConPersonProposalOrder", Value.fromBigInt(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get contracts(): Array<string> | null {
    let value = this.get("contracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set contracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("contracts");
    } else {
      this.set("contracts", Value.fromStringArray(value as Array<string>));
    }
  }

  get persons(): Array<string> | null {
    let value = this.get("persons");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set persons(value: Array<string> | null) {
    if (value === null) {
      this.unset("persons");
    } else {
      this.set("persons", Value.fromStringArray(value as Array<string>));
    }
  }

  get judgers(): Array<string> | null {
    let value = this.get("judgers");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set judgers(value: Array<string> | null) {
    if (value === null) {
      this.unset("judgers");
    } else {
      this.set("judgers", Value.fromStringArray(value as Array<string>));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (value === null) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(value as Array<string>));
    }
  }

  get judgeProposals(): Array<string> | null {
    let value = this.get("judgeProposals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set judgeProposals(value: Array<string> | null) {
    if (value === null) {
      this.unset("judgeProposals");
    } else {
      this.set("judgeProposals", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get controlledToken(): Bytes {
    let value = this.get("controlledToken");
    return value.toBytes();
  }

  set controlledToken(value: Bytes) {
    this.set("controlledToken", Value.fromBytes(value));
  }

  get tokenFaucet(): Bytes {
    let value = this.get("tokenFaucet");
    return value.toBytes();
  }

  set tokenFaucet(value: Bytes) {
    this.set("tokenFaucet", Value.fromBytes(value));
  }
}

export class MainContractPerson extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MainContractPerson entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MainContractPerson entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MainContractPerson", id.toString(), this);
  }

  static load(id: string): MainContractPerson | null {
    return store.get("MainContractPerson", id) as MainContractPerson | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get person(): string {
    let value = this.get("person");
    return value.toString();
  }

  set person(value: string) {
    this.set("person", Value.fromString(value));
  }

  get mainContract(): string {
    let value = this.get("mainContract");
    return value.toString();
  }

  set mainContract(value: string) {
    this.set("mainContract", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Contract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Contract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Contract", id.toString(), this);
  }

  static load(id: string): Contract | null {
    return store.get("Contract", id) as Contract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startBlockTime(): BigInt {
    let value = this.get("startBlockTime");
    return value.toBigInt();
  }

  set startBlockTime(value: BigInt) {
    this.set("startBlockTime", Value.fromBigInt(value));
  }

  get contentOrIpfsHash(): string {
    let value = this.get("contentOrIpfsHash");
    return value.toString();
  }

  set contentOrIpfsHash(value: string) {
    this.set("contentOrIpfsHash", Value.fromString(value));
  }

  get judgerOrgAddr(): Bytes {
    let value = this.get("judgerOrgAddr");
    return value.toBytes();
  }

  set judgerOrgAddr(value: Bytes) {
    this.set("judgerOrgAddr", Value.fromBytes(value));
  }

  get mainContract(): string {
    let value = this.get("mainContract");
    return value.toString();
  }

  set mainContract(value: string) {
    this.set("mainContract", Value.fromString(value));
  }

  get mainContractOrder(): BigInt {
    let value = this.get("mainContractOrder");
    return value.toBigInt();
  }

  set mainContractOrder(value: BigInt) {
    this.set("mainContractOrder", Value.fromBigInt(value));
  }

  get contractOrder(): i32 {
    let value = this.get("contractOrder");
    return value.toI32();
  }

  set contractOrder(value: i32) {
    this.set("contractOrder", Value.fromI32(value));
  }

  get persons(): Array<string> | null {
    let value = this.get("persons");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set persons(value: Array<string> | null) {
    if (value === null) {
      this.unset("persons");
    } else {
      this.set("persons", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class ContractPerson extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ContractPerson entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ContractPerson entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ContractPerson", id.toString(), this);
  }

  static load(id: string): ContractPerson | null {
    return store.get("ContractPerson", id) as ContractPerson | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get person(): string {
    let value = this.get("person");
    return value.toString();
  }

  set person(value: string) {
    this.set("person", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get signStatus(): i32 {
    let value = this.get("signStatus");
    return value.toI32();
  }

  set signStatus(value: i32) {
    this.set("signStatus", Value.fromI32(value));
  }
}

export class AssignPlan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssignPlan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssignPlan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssignPlan", id.toString(), this);
  }

  static load(id: string): AssignPlan | null {
    return store.get("AssignPlan", id) as AssignPlan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get person(): string {
    let value = this.get("person");
    return value.toString();
  }

  set person(value: string) {
    this.set("person", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class ProposalPerson extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalPerson entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalPerson entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalPerson", id.toString(), this);
  }

  static load(id: string): ProposalPerson | null {
    return store.get("ProposalPerson", id) as ProposalPerson | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get person(): string {
    let value = this.get("person");
    return value.toString();
  }

  set person(value: string) {
    this.set("person", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get signStatus(): i32 {
    let value = this.get("signStatus");
    return value.toI32();
  }

  set signStatus(value: i32) {
    this.set("signStatus", Value.fromI32(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get judgerOrgAddr(): Bytes {
    let value = this.get("judgerOrgAddr");
    return value.toBytes();
  }

  set judgerOrgAddr(value: Bytes) {
    this.set("judgerOrgAddr", Value.fromBytes(value));
  }

  get mainContractOrder(): BigInt {
    let value = this.get("mainContractOrder");
    return value.toBigInt();
  }

  set mainContractOrder(value: BigInt) {
    this.set("mainContractOrder", Value.fromBigInt(value));
  }

  get proposalOrder(): BigInt {
    let value = this.get("proposalOrder");
    return value.toBigInt();
  }

  set proposalOrder(value: BigInt) {
    this.set("proposalOrder", Value.fromBigInt(value));
  }

  get mainContract(): string {
    let value = this.get("mainContract");
    return value.toString();
  }

  set mainContract(value: string) {
    this.set("mainContract", Value.fromString(value));
  }
}

export class Person extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Person entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Person entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Person", id.toString(), this);
  }

  static load(id: string): Person | null {
    return store.get("Person", id) as Person | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mainContracts(): Array<string> | null {
    let value = this.get("mainContracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mainContracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("mainContracts");
    } else {
      this.set("mainContracts", Value.fromStringArray(value as Array<string>));
    }
  }

  get contracts(): Array<string> | null {
    let value = this.get("contracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set contracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("contracts");
    } else {
      this.set("contracts", Value.fromStringArray(value as Array<string>));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (value === null) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class MainContractJudger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MainContractJudger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MainContractJudger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MainContractJudger", id.toString(), this);
  }

  static load(id: string): MainContractJudger | null {
    return store.get("MainContractJudger", id) as MainContractJudger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get judger(): string {
    let value = this.get("judger");
    return value.toString();
  }

  set judger(value: string) {
    this.set("judger", Value.fromString(value));
  }

  get mainContract(): string {
    let value = this.get("mainContract");
    return value.toString();
  }

  set mainContract(value: string) {
    this.set("mainContract", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class ProposalJudger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalJudger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalJudger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalJudger", id.toString(), this);
  }

  static load(id: string): ProposalJudger | null {
    return store.get("ProposalJudger", id) as ProposalJudger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get judger(): string {
    let value = this.get("judger");
    return value.toString();
  }

  set judger(value: string) {
    this.set("judger", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get signStatus(): i32 {
    let value = this.get("signStatus");
    return value.toI32();
  }

  set signStatus(value: i32) {
    this.set("signStatus", Value.fromI32(value));
  }
}

export class JudgeAssignPlan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JudgeAssignPlan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JudgeAssignPlan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JudgeAssignPlan", id.toString(), this);
  }

  static load(id: string): JudgeAssignPlan | null {
    return store.get("JudgeAssignPlan", id) as JudgeAssignPlan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get person(): string {
    let value = this.get("person");
    return value.toString();
  }

  set person(value: string) {
    this.set("person", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class JudgeProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JudgeProposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JudgeProposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JudgeProposal", id.toString(), this);
  }

  static load(id: string): JudgeProposal | null {
    return store.get("JudgeProposal", id) as JudgeProposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get judgerOrgAddr(): Bytes {
    let value = this.get("judgerOrgAddr");
    return value.toBytes();
  }

  set judgerOrgAddr(value: Bytes) {
    this.set("judgerOrgAddr", Value.fromBytes(value));
  }

  get mainContractOrder(): BigInt {
    let value = this.get("mainContractOrder");
    return value.toBigInt();
  }

  set mainContractOrder(value: BigInt) {
    this.set("mainContractOrder", Value.fromBigInt(value));
  }

  get proposalOrder(): BigInt {
    let value = this.get("proposalOrder");
    return value.toBigInt();
  }

  set proposalOrder(value: BigInt) {
    this.set("proposalOrder", Value.fromBigInt(value));
  }

  get mainContract(): string {
    let value = this.get("mainContract");
    return value.toString();
  }

  set mainContract(value: string) {
    this.set("mainContract", Value.fromString(value));
  }
}

export class Judger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Judger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Judger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Judger", id.toString(), this);
  }

  static load(id: string): Judger | null {
    return store.get("Judger", id) as Judger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mainContracts(): Array<string> | null {
    let value = this.get("mainContracts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mainContracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("mainContracts");
    } else {
      this.set("mainContracts", Value.fromStringArray(value as Array<string>));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (value === null) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(value as Array<string>));
    }
  }

  get judgerOrgs(): Array<string> | null {
    let value = this.get("judgerOrgs");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set judgerOrgs(value: Array<string> | null) {
    if (value === null) {
      this.unset("judgerOrgs");
    } else {
      this.set("judgerOrgs", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class JudgerOrgJudger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JudgerOrgJudger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JudgerOrgJudger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JudgerOrgJudger", id.toString(), this);
  }

  static load(id: string): JudgerOrgJudger | null {
    return store.get("JudgerOrgJudger", id) as JudgerOrgJudger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get judger(): string {
    let value = this.get("judger");
    return value.toString();
  }

  set judger(value: string) {
    this.set("judger", Value.fromString(value));
  }

  get judgerOrg(): string {
    let value = this.get("judgerOrg");
    return value.toString();
  }

  set judgerOrg(value: string) {
    this.set("judgerOrg", Value.fromString(value));
  }

  get status(): BigInt {
    let value = this.get("status");
    return value.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get idleStatus(): boolean {
    let value = this.get("idleStatus");
    return value.toBoolean();
  }

  set idleStatus(value: boolean) {
    this.set("idleStatus", Value.fromBoolean(value));
  }
}

export class JudgerOrg extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JudgerOrg entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JudgerOrg entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JudgerOrg", id.toString(), this);
  }

  static load(id: string): JudgerOrg | null {
    return store.get("JudgerOrg", id) as JudgerOrg | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get governorAlphaAddr(): Bytes {
    let value = this.get("governorAlphaAddr");
    return value.toBytes();
  }

  set governorAlphaAddr(value: Bytes) {
    this.set("governorAlphaAddr", Value.fromBytes(value));
  }

  get url(): string | null {
    let value = this.get("url");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (value === null) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(value as string));
    }
  }

  get contact(): string | null {
    let value = this.get("contact");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contact(value: string | null) {
    if (value === null) {
      this.unset("contact");
    } else {
      this.set("contact", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get assignJudgerNum(): i32 {
    let value = this.get("assignJudgerNum");
    return value.toI32();
  }

  set assignJudgerNum(value: i32) {
    this.set("assignJudgerNum", Value.fromI32(value));
  }

  get rateMantissa(): BigInt | null {
    let value = this.get("rateMantissa");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rateMantissa(value: BigInt | null) {
    if (value === null) {
      this.unset("rateMantissa");
    } else {
      this.set("rateMantissa", Value.fromBigInt(value as BigInt));
    }
  }

  get limitJudgePeriodTime(): BigInt | null {
    let value = this.get("limitJudgePeriodTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set limitJudgePeriodTime(value: BigInt | null) {
    if (value === null) {
      this.unset("limitJudgePeriodTime");
    } else {
      this.set("limitJudgePeriodTime", Value.fromBigInt(value as BigInt));
    }
  }

  get exitWaitPeriodTime(): BigInt | null {
    let value = this.get("exitWaitPeriodTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitWaitPeriodTime(value: BigInt | null) {
    if (value === null) {
      this.unset("exitWaitPeriodTime");
    } else {
      this.set("exitWaitPeriodTime", Value.fromBigInt(value as BigInt));
    }
  }

  get remark(): string | null {
    let value = this.get("remark");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set remark(value: string | null) {
    if (value === null) {
      this.unset("remark");
    } else {
      this.set("remark", Value.fromString(value as string));
    }
  }

  get maxCaseNum(): i32 {
    let value = this.get("maxCaseNum");
    return value.toI32();
  }

  set maxCaseNum(value: i32) {
    this.set("maxCaseNum", Value.fromI32(value));
  }

  get governorProposals(): Array<string> | null {
    let value = this.get("governorProposals");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set governorProposals(value: Array<string> | null) {
    if (value === null) {
      this.unset("governorProposals");
    } else {
      this.set(
        "governorProposals",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get judgers(): Array<string> | null {
    let value = this.get("judgers");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set judgers(value: Array<string> | null) {
    if (value === null) {
      this.unset("judgers");
    } else {
      this.set("judgers", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class GovernorProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GovernorProposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GovernorProposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GovernorProposal", id.toString(), this);
  }

  static load(id: string): GovernorProposal | null {
    return store.get("GovernorProposal", id) as GovernorProposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get order(): BigInt {
    let value = this.get("order");
    return value.toBigInt();
  }

  set order(value: BigInt) {
    this.set("order", Value.fromBigInt(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get targets(): Array<Bytes> | null {
    let value = this.get("targets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set targets(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("targets");
    } else {
      this.set("targets", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get("values");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("values");
    } else {
      this.set("values", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (value === null) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(value as Array<string>));
    }
  }

  get calldatas(): Array<Bytes> | null {
    let value = this.get("calldatas");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("calldatas");
    } else {
      this.set("calldatas", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get startBlock(): BigInt | null {
    let value = this.get("startBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("startBlock");
    } else {
      this.set("startBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get startBlockTime(): BigInt | null {
    let value = this.get("startBlockTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startBlockTime(value: BigInt | null) {
    if (value === null) {
      this.unset("startBlockTime");
    } else {
      this.set("startBlockTime", Value.fromBigInt(value as BigInt));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get endBlock(): BigInt | null {
    let value = this.get("endBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("endBlock");
    } else {
      this.set("endBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get endBlockTime(): BigInt | null {
    let value = this.get("endBlockTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endBlockTime(value: BigInt | null) {
    if (value === null) {
      this.unset("endBlockTime");
    } else {
      this.set("endBlockTime", Value.fromBigInt(value as BigInt));
    }
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get eta(): BigInt | null {
    let value = this.get("eta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eta(value: BigInt | null) {
    if (value === null) {
      this.unset("eta");
    } else {
      this.set("eta", Value.fromBigInt(value as BigInt));
    }
  }

  get judgerOrg(): string {
    let value = this.get("judgerOrg");
    return value.toString();
  }

  set judgerOrg(value: string) {
    this.set("judgerOrg", Value.fromString(value));
  }

  get forVotes(): BigInt {
    let value = this.get("forVotes");
    return value.toBigInt();
  }

  set forVotes(value: BigInt) {
    this.set("forVotes", Value.fromBigInt(value));
  }

  get againstVotes(): BigInt {
    let value = this.get("againstVotes");
    return value.toBigInt();
  }

  set againstVotes(value: BigInt) {
    this.set("againstVotes", Value.fromBigInt(value));
  }

  get votesDiff(): BigInt {
    let value = this.get("votesDiff");
    return value.toBigInt();
  }

  set votesDiff(value: BigInt) {
    this.set("votesDiff", Value.fromBigInt(value));
  }
}
