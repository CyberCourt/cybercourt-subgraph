// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class assignJudgerEvent extends ethereum.Event {
  get params(): assignJudgerEvent__Params {
    return new assignJudgerEvent__Params(this);
  }
}

export class assignJudgerEvent__Params {
  _event: assignJudgerEvent;

  constructor(event: assignJudgerEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class finishEvent extends ethereum.Event {
  get params(): finishEvent__Params {
    return new finishEvent__Params(this);
  }
}

export class finishEvent__Params {
  _event: finishEvent;

  constructor(event: finishEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class setAcceptTokenEvent extends ethereum.Event {
  get params(): setAcceptTokenEvent__Params {
    return new setAcceptTokenEvent__Params(this);
  }
}

export class setAcceptTokenEvent__Params {
  _event: setAcceptTokenEvent;

  constructor(event: setAcceptTokenEvent) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAcceptable(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get minAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class setAssignJudgerNumEvent extends ethereum.Event {
  get params(): setAssignJudgerNumEvent__Params {
    return new setAssignJudgerNumEvent__Params(this);
  }
}

export class setAssignJudgerNumEvent__Params {
  _event: setAssignJudgerNumEvent;

  constructor(event: setAssignJudgerNumEvent) {
    this._event = event;
  }

  get assignJudgerNum(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class setContactEvent extends ethereum.Event {
  get params(): setContactEvent__Params {
    return new setContactEvent__Params(this);
  }
}

export class setContactEvent__Params {
  _event: setContactEvent;

  constructor(event: setContactEvent) {
    this._event = event;
  }

  get contact(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class setContactMapEvent extends ethereum.Event {
  get params(): setContactMapEvent__Params {
    return new setContactMapEvent__Params(this);
  }
}

export class setContactMapEvent__Params {
  _event: setContactMapEvent;

  constructor(event: setContactMapEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contact(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class setIdleStatusEvent extends ethereum.Event {
  get params(): setIdleStatusEvent__Params {
    return new setIdleStatusEvent__Params(this);
  }
}

export class setIdleStatusEvent__Params {
  _event: setIdleStatusEvent;

  constructor(event: setIdleStatusEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get idleStatus(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class setMaxCaseNumEvent extends ethereum.Event {
  get params(): setMaxCaseNumEvent__Params {
    return new setMaxCaseNumEvent__Params(this);
  }
}

export class setMaxCaseNumEvent__Params {
  _event: setMaxCaseNumEvent;

  constructor(event: setMaxCaseNumEvent) {
    this._event = event;
  }

  get maxCaseNum(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class setNameEvent extends ethereum.Event {
  get params(): setNameEvent__Params {
    return new setNameEvent__Params(this);
  }
}

export class setNameEvent__Params {
  _event: setNameEvent;

  constructor(event: setNameEvent) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class setRateMantissaEvent extends ethereum.Event {
  get params(): setRateMantissaEvent__Params {
    return new setRateMantissaEvent__Params(this);
  }
}

export class setRateMantissaEvent__Params {
  _event: setRateMantissaEvent;

  constructor(event: setRateMantissaEvent) {
    this._event = event;
  }

  get rateMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class setRemarkEvent extends ethereum.Event {
  get params(): setRemarkEvent__Params {
    return new setRemarkEvent__Params(this);
  }
}

export class setRemarkEvent__Params {
  _event: setRemarkEvent;

  constructor(event: setRemarkEvent) {
    this._event = event;
  }

  get remark(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class setTimesEvent extends ethereum.Event {
  get params(): setTimesEvent__Params {
    return new setTimesEvent__Params(this);
  }
}

export class setTimesEvent__Params {
  _event: setTimesEvent;

  constructor(event: setTimesEvent) {
    this._event = event;
  }

  get limitJudgePeriodTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exitWaitPeriodTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class setUrlEvent extends ethereum.Event {
  get params(): setUrlEvent__Params {
    return new setUrlEvent__Params(this);
  }
}

export class setUrlEvent__Params {
  _event: setUrlEvent;

  constructor(event: setUrlEvent) {
    this._event = event;
  }

  get url(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class setWhiteJudgerEvent extends ethereum.Event {
  get params(): setWhiteJudgerEvent__Params {
    return new setWhiteJudgerEvent__Params(this);
  }
}

export class setWhiteJudgerEvent__Params {
  _event: setWhiteJudgerEvent;

  constructor(event: setWhiteJudgerEvent) {
    this._event = event;
  }

  get dst(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class transferERC20Event extends ethereum.Event {
  get params(): transferERC20Event__Params {
    return new transferERC20Event__Params(this);
  }
}

export class transferERC20Event__Params {
  _event: transferERC20Event;

  constructor(event: transferERC20Event) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dest(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class JudgerOrg__acceptTokenMapResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JudgerOrg__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JudgerOrg extends ethereum.SmartContract {
  static bind(address: Address): JudgerOrg {
    return new JudgerOrg("JudgerOrg", address);
  }

  DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  acceptTokenMap(param0: Address): JudgerOrg__acceptTokenMapResult {
    let result = super.call(
      "acceptTokenMap",
      "acceptTokenMap(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new JudgerOrg__acceptTokenMapResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_acceptTokenMap(
    param0: Address
  ): ethereum.CallResult<JudgerOrg__acceptTokenMapResult> {
    let result = super.tryCall(
      "acceptTokenMap",
      "acceptTokenMap(address):(bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JudgerOrg__acceptTokenMapResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  assignJudgerNum(): i32 {
    let result = super.call("assignJudgerNum", "assignJudgerNum():(uint8)", []);

    return result[0].toI32();
  }

  try_assignJudgerNum(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "assignJudgerNum",
      "assignJudgerNum():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  caseNum(param0: Address): i32 {
    let result = super.call("caseNum", "caseNum(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toI32();
  }

  try_caseNum(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("caseNum", "caseNum(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  checkpoints(param0: Address, param1: BigInt): JudgerOrg__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new JudgerOrg__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<JudgerOrg__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):(uint32,uint96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JudgerOrg__checkpointsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  contact(): string {
    let result = super.call("contact", "contact():(string)", []);

    return result[0].toString();
  }

  try_contact(): ethereum.CallResult<string> {
    let result = super.tryCall("contact", "contact():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contactMap(param0: Address): string {
    let result = super.call("contactMap", "contactMap(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_contactMap(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("contactMap", "contactMap(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegates(param0: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  entrance(): Address {
    let result = super.call("entrance", "entrance():(address)", []);

    return result[0].toAddress();
  }

  try_entrance(): ethereum.CallResult<Address> {
    let result = super.tryCall("entrance", "entrance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exitWaitPeriodTime(): BigInt {
    let result = super.call(
      "exitWaitPeriodTime",
      "exitWaitPeriodTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exitWaitPeriodTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitWaitPeriodTime",
      "exitWaitPeriodTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  idleJudgerSupply(): BigInt {
    let result = super.call(
      "idleJudgerSupply",
      "idleJudgerSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_idleJudgerSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "idleJudgerSupply",
      "idleJudgerSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isIdle(param0: Address): boolean {
    let result = super.call("isIdle", "isIdle(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isIdle(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isIdle", "isIdle(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  limitJudgePeriodTime(): BigInt {
    let result = super.call(
      "limitJudgePeriodTime",
      "limitJudgePeriodTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_limitJudgePeriodTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "limitJudgePeriodTime",
      "limitJudgePeriodTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxCaseNum(): i32 {
    let result = super.call("maxCaseNum", "maxCaseNum():(uint8)", []);

    return result[0].toI32();
  }

  try_maxCaseNum(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxCaseNum", "maxCaseNum():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rateMantissa(): BigInt {
    let result = super.call("rateMantissa", "rateMantissa():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rateMantissa", "rateMantissa():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remark(): string {
    let result = super.call("remark", "remark():(string)", []);

    return result[0].toString();
  }

  try_remark(): ethereum.CallResult<string> {
    let result = super.tryCall("remark", "remark():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  url(): string {
    let result = super.call("url", "url():(string)", []);

    return result[0].toString();
  }

  try_url(): ethereum.CallResult<string> {
    let result = super.tryCall("url", "url():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  assignJudger(randomNumber: BigInt, order: i32): Address {
    let result = super.call(
      "assignJudger",
      "assignJudger(uint256,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(randomNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(order))
      ]
    );

    return result[0].toAddress();
  }

  try_assignJudger(
    randomNumber: BigInt,
    order: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assignJudger",
      "assignJudger(uint256,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(randomNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(order))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentVotes(account: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint96)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriorVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriorVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriorVotes",
      "getPriorVotes(address,uint256):(uint96)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get entrance_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get firstJudger(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetAcceptTokenMapCall extends ethereum.Call {
  get inputs(): SetAcceptTokenMapCall__Inputs {
    return new SetAcceptTokenMapCall__Inputs(this);
  }

  get outputs(): SetAcceptTokenMapCall__Outputs {
    return new SetAcceptTokenMapCall__Outputs(this);
  }
}

export class SetAcceptTokenMapCall__Inputs {
  _call: SetAcceptTokenMapCall;

  constructor(call: SetAcceptTokenMapCall) {
    this._call = call;
  }

  get acceptToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isAcceptable_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get minAmount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetAcceptTokenMapCall__Outputs {
  _call: SetAcceptTokenMapCall;

  constructor(call: SetAcceptTokenMapCall) {
    this._call = call;
  }
}

export class SetTimesCall extends ethereum.Call {
  get inputs(): SetTimesCall__Inputs {
    return new SetTimesCall__Inputs(this);
  }

  get outputs(): SetTimesCall__Outputs {
    return new SetTimesCall__Outputs(this);
  }
}

export class SetTimesCall__Inputs {
  _call: SetTimesCall;

  constructor(call: SetTimesCall) {
    this._call = call;
  }

  get limitJudgePeriodTime_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get exitWaitPeriodTime_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTimesCall__Outputs {
  _call: SetTimesCall;

  constructor(call: SetTimesCall) {
    this._call = call;
  }
}

export class SetAssignJudgerNumCall extends ethereum.Call {
  get inputs(): SetAssignJudgerNumCall__Inputs {
    return new SetAssignJudgerNumCall__Inputs(this);
  }

  get outputs(): SetAssignJudgerNumCall__Outputs {
    return new SetAssignJudgerNumCall__Outputs(this);
  }
}

export class SetAssignJudgerNumCall__Inputs {
  _call: SetAssignJudgerNumCall;

  constructor(call: SetAssignJudgerNumCall) {
    this._call = call;
  }

  get assignJudgerNum_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetAssignJudgerNumCall__Outputs {
  _call: SetAssignJudgerNumCall;

  constructor(call: SetAssignJudgerNumCall) {
    this._call = call;
  }
}

export class TransferERC20BatCall extends ethereum.Call {
  get inputs(): TransferERC20BatCall__Inputs {
    return new TransferERC20BatCall__Inputs(this);
  }

  get outputs(): TransferERC20BatCall__Outputs {
    return new TransferERC20BatCall__Outputs(this);
  }
}

export class TransferERC20BatCall__Inputs {
  _call: TransferERC20BatCall;

  constructor(call: TransferERC20BatCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get dests(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferERC20BatCall__Outputs {
  _call: TransferERC20BatCall;

  constructor(call: TransferERC20BatCall) {
    this._call = call;
  }
}

export class TransferERC20Call extends ethereum.Call {
  get inputs(): TransferERC20Call__Inputs {
    return new TransferERC20Call__Inputs(this);
  }

  get outputs(): TransferERC20Call__Outputs {
    return new TransferERC20Call__Outputs(this);
  }
}

export class TransferERC20Call__Inputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dest(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferERC20Call__Outputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }
}

export class SetRemarkCall extends ethereum.Call {
  get inputs(): SetRemarkCall__Inputs {
    return new SetRemarkCall__Inputs(this);
  }

  get outputs(): SetRemarkCall__Outputs {
    return new SetRemarkCall__Outputs(this);
  }
}

export class SetRemarkCall__Inputs {
  _call: SetRemarkCall;

  constructor(call: SetRemarkCall) {
    this._call = call;
  }

  get remark_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetRemarkCall__Outputs {
  _call: SetRemarkCall;

  constructor(call: SetRemarkCall) {
    this._call = call;
  }
}

export class SetContactCall extends ethereum.Call {
  get inputs(): SetContactCall__Inputs {
    return new SetContactCall__Inputs(this);
  }

  get outputs(): SetContactCall__Outputs {
    return new SetContactCall__Outputs(this);
  }
}

export class SetContactCall__Inputs {
  _call: SetContactCall;

  constructor(call: SetContactCall) {
    this._call = call;
  }

  get contact_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContactCall__Outputs {
  _call: SetContactCall;

  constructor(call: SetContactCall) {
    this._call = call;
  }
}

export class SetUrlCall extends ethereum.Call {
  get inputs(): SetUrlCall__Inputs {
    return new SetUrlCall__Inputs(this);
  }

  get outputs(): SetUrlCall__Outputs {
    return new SetUrlCall__Outputs(this);
  }
}

export class SetUrlCall__Inputs {
  _call: SetUrlCall;

  constructor(call: SetUrlCall) {
    this._call = call;
  }

  get url_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetUrlCall__Outputs {
  _call: SetUrlCall;

  constructor(call: SetUrlCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetMaxCaseNumCall extends ethereum.Call {
  get inputs(): SetMaxCaseNumCall__Inputs {
    return new SetMaxCaseNumCall__Inputs(this);
  }

  get outputs(): SetMaxCaseNumCall__Outputs {
    return new SetMaxCaseNumCall__Outputs(this);
  }
}

export class SetMaxCaseNumCall__Inputs {
  _call: SetMaxCaseNumCall;

  constructor(call: SetMaxCaseNumCall) {
    this._call = call;
  }

  get maxCaseNum_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMaxCaseNumCall__Outputs {
  _call: SetMaxCaseNumCall;

  constructor(call: SetMaxCaseNumCall) {
    this._call = call;
  }
}

export class SetRateMantissaCall extends ethereum.Call {
  get inputs(): SetRateMantissaCall__Inputs {
    return new SetRateMantissaCall__Inputs(this);
  }

  get outputs(): SetRateMantissaCall__Outputs {
    return new SetRateMantissaCall__Outputs(this);
  }
}

export class SetRateMantissaCall__Inputs {
  _call: SetRateMantissaCall;

  constructor(call: SetRateMantissaCall) {
    this._call = call;
  }

  get rateMantissa_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRateMantissaCall__Outputs {
  _call: SetRateMantissaCall;

  constructor(call: SetRateMantissaCall) {
    this._call = call;
  }
}

export class SetContactMapCall extends ethereum.Call {
  get inputs(): SetContactMapCall__Inputs {
    return new SetContactMapCall__Inputs(this);
  }

  get outputs(): SetContactMapCall__Outputs {
    return new SetContactMapCall__Outputs(this);
  }
}

export class SetContactMapCall__Inputs {
  _call: SetContactMapCall;

  constructor(call: SetContactMapCall) {
    this._call = call;
  }

  get contact_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContactMapCall__Outputs {
  _call: SetContactMapCall;

  constructor(call: SetContactMapCall) {
    this._call = call;
  }
}

export class SetIdleStatusCall extends ethereum.Call {
  get inputs(): SetIdleStatusCall__Inputs {
    return new SetIdleStatusCall__Inputs(this);
  }

  get outputs(): SetIdleStatusCall__Outputs {
    return new SetIdleStatusCall__Outputs(this);
  }
}

export class SetIdleStatusCall__Inputs {
  _call: SetIdleStatusCall;

  constructor(call: SetIdleStatusCall) {
    this._call = call;
  }

  get idleStatus(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIdleStatusCall__Outputs {
  _call: SetIdleStatusCall;

  constructor(call: SetIdleStatusCall) {
    this._call = call;
  }
}

export class UpdateStatusCall extends ethereum.Call {
  get inputs(): UpdateStatusCall__Inputs {
    return new UpdateStatusCall__Inputs(this);
  }

  get outputs(): UpdateStatusCall__Outputs {
    return new UpdateStatusCall__Outputs(this);
  }
}

export class UpdateStatusCall__Inputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }
}

export class UpdateStatusCall__Outputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }
}

export class UpdateStatusBatCall extends ethereum.Call {
  get inputs(): UpdateStatusBatCall__Inputs {
    return new UpdateStatusBatCall__Inputs(this);
  }

  get outputs(): UpdateStatusBatCall__Outputs {
    return new UpdateStatusBatCall__Outputs(this);
  }
}

export class UpdateStatusBatCall__Inputs {
  _call: UpdateStatusBatCall;

  constructor(call: UpdateStatusBatCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdateStatusBatCall__Outputs {
  _call: UpdateStatusBatCall;

  constructor(call: UpdateStatusBatCall) {
    this._call = call;
  }
}

export class FinishCall extends ethereum.Call {
  get inputs(): FinishCall__Inputs {
    return new FinishCall__Inputs(this);
  }

  get outputs(): FinishCall__Outputs {
    return new FinishCall__Outputs(this);
  }
}

export class FinishCall__Inputs {
  _call: FinishCall;

  constructor(call: FinishCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FinishCall__Outputs {
  _call: FinishCall;

  constructor(call: FinishCall) {
    this._call = call;
  }
}

export class AssignJudgerCall extends ethereum.Call {
  get inputs(): AssignJudgerCall__Inputs {
    return new AssignJudgerCall__Inputs(this);
  }

  get outputs(): AssignJudgerCall__Outputs {
    return new AssignJudgerCall__Outputs(this);
  }
}

export class AssignJudgerCall__Inputs {
  _call: AssignJudgerCall;

  constructor(call: AssignJudgerCall) {
    this._call = call;
  }

  get randomNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get order(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AssignJudgerCall__Outputs {
  _call: AssignJudgerCall;

  constructor(call: AssignJudgerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetWhiteJudgerBatCall extends ethereum.Call {
  get inputs(): SetWhiteJudgerBatCall__Inputs {
    return new SetWhiteJudgerBatCall__Inputs(this);
  }

  get outputs(): SetWhiteJudgerBatCall__Outputs {
    return new SetWhiteJudgerBatCall__Outputs(this);
  }
}

export class SetWhiteJudgerBatCall__Inputs {
  _call: SetWhiteJudgerBatCall;

  constructor(call: SetWhiteJudgerBatCall) {
    this._call = call;
  }

  get dst(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get rawAmount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetWhiteJudgerBatCall__Outputs {
  _call: SetWhiteJudgerBatCall;

  constructor(call: SetWhiteJudgerBatCall) {
    this._call = call;
  }
}

export class SetWhiteJudgerCall extends ethereum.Call {
  get inputs(): SetWhiteJudgerCall__Inputs {
    return new SetWhiteJudgerCall__Inputs(this);
  }

  get outputs(): SetWhiteJudgerCall__Outputs {
    return new SetWhiteJudgerCall__Outputs(this);
  }
}

export class SetWhiteJudgerCall__Inputs {
  _call: SetWhiteJudgerCall;

  constructor(call: SetWhiteJudgerCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rawAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetWhiteJudgerCall__Outputs {
  _call: SetWhiteJudgerCall;

  constructor(call: SetWhiteJudgerCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}
